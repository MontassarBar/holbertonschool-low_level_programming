!<arch>
0-isupper.c/    0           0     0     644     188       `
#include "main.h"
/**
* _isupper - checks for uppercase character
*loop
*@c: var
*Return: 1 or 0
**/
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     259       `
#include "main.h"
#include <string.h>
/**
**_memset - fills memory with a constant byte
*loop
*@s: pointer
*@b: var
*@n: var
*Return: s
**/
char *_memset(char *s, char b, unsigned int n)
{
unsigned int x;
for (x = 0; x < n; x++)
s[x] = b;

return (s);





}

0-strcat.c/     0           0     0     644     291       `
#include "main.h"
#include <string.h>
/**
* *_strcat -  concatenates two strings
*loop
*@dest: pointer
*@src: pointer
*Return: dest
**/
char *_strcat(char *dest, char *src)
{
int x, z, i;
z = strlen(src);
i = strlen(dest);
for (x = 0; x < z; x++)
{
dest[i] = src[x];
i++;
}
return (dest);
}

1-isdigit.c/    0           0     0     644     175       `
#include "main.h"
/**
*_isdigit - checks for a digit
*loop
*@c: var
*Return: 1 or 0
**/
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}

1-memcpy.c/     0           0     0     644     293       `
#include "main.h"
#include <string.h>
/**
**_memcpy - copies memory area
*loop
*@dest: pointer
*@src: pointer
*@n: var
*Return: dest
**/
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int x;
int y;
y = 0;
for (x = 0; x < n; x++)
{
dest[y] = src[x];
y++;
}
return (dest);



}

1-strncat.c/    0           0     0     644     325       `
#include "main.h"
#include <string.h>
/**
**_strncat - concatenates two strings
*loop
*@dest: pointer
*@src: pointer
*@n: var
*Return: dest
**/
char *_strncat(char *dest, char *src, int n)
{
int x, y, z;
y = strlen(src);
z = strlen(dest);
if (n > y)
n = y;
for (x = 0; x < n; x++)
{
dest[z] = src[x];
z++;
}
return (dest);
}

100-atoi.c/     0           0     0     644     146       `
#include "main.h"
#include <stdlib.h>
/**
*_atoi - convert a char into int
*@s:pointer
*Return: 0
**/
int _atoi(char *s)
{
atoi(s);
return (0);
}
2-strchr.c/     0           0     0     644     252       `
#include "main.h"
#include <string.h>
/**
**_strchr - locates a character in a string
*loop
*@s: pointer
*@c: var
*Return: s
**/
char *_strchr(char *s, char c)
{
while ((*s != c) && (*s != '\0'))
{
s++;
}
if (*s == c)
return (s);
else
return (NULL);
}
2-strlen.c/     0           0     0     644     174       `
#include "main.h"
#include <string.h>
/**
*_strlen - returns the length of a string
*pointerrrs
*@s: pointer
*Return: strlen
**/
int _strlen(char *s)
{
return (strlen(s));
}
3-islower.c/    0           0     0     644     196       `
#include "main.h"
/**
*_islower - checks for lowercase character
*return 1 or 0
*@c: variable
*Return: 0
**/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     180       `
#include "main.h"
#include <stdio.h>
/**
*_puts - prints a string, followed by a new line
*pointerrrs
*@str: pointer
*Return: none
**/
void _puts(char *str)
{
puts(str);
return;
}
3-strcmp.c/     0           0     0     644     317       `
#include "main.h"
#include <string.h>
/**
*_strcmp - compares two strings
*loop
*@s1: pointer
*@s2: pointer
*Return: a
**/
int _strcmp(char *s1, char *s2)
{
int x, y, z, a;
y = strlen(s1);
z = 0;
a = 0;
for (x = 0; ((x < y)&&(z == 0)); x++)
{
if (s1[x] != s2[x])
z = 1;
if (z == 1)
a = s1[x] - s2[x];
}
return (a);
}

3-strspn.c/     0           0     0     644     414       `
#include "main.h"
#include <string.h>
/**
*_strspn - gets the length of a prefix substring
*loops
*@s: pointer
*@accept: pointer
*Return: r
**/
unsigned int _strspn(char *s, char *accept)
{
int x, y, z, a, r;
y = strlen(s);
a = strlen(accept);
r = 0;
for (x = 0; x < y; x++)
{
for (z = 0; z < a; z++)
{
if (s[x] == accept[z])
break;
}
if (s[x] == accept[z])
r++;
else if (s[x] != accept[z])
break;
}
return (r);
}
4-isalpha.c/    0           0     0     644     237       `
#include "main.h"
/**
* _isalpha - checks for alphabetic character
*loops
*@c: variable
*Return: 0
**/
int _isalpha(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    0           0     0     644     365       `
#include "main.h"
#include <string.h>
/**
**_strpbrk - searches a string for any of a set of bytes
*loops
*@s: pointer
*@accept: pointer
*Return: s+x or NULL
**/
char *_strpbrk(char *s, char *accept)
{
int x, i, y, z;
y = strlen(s);
z = strlen(accept);
for (x = 0; x < y; x++)
{
for (i = 0; i < z; i++)
{
if (s[x] == accept[i])
return (s + x);
}
}
return (NULL);
}

5-strstr.c/     0           0     0     644     316       `
#include "main.h"
#include <string.h>
/**
**_strstr - locates a substring
*loop
*@haystack: pointer;
*@needle: pointer
*Return: h or Null
**/
char *_strstr(char *haystack, char *needle)
{
int y, z;
z = strlen(haystack);
for (y = 0; y < z; y++)
{
if (*needle == haystack[y])
return (haystack + y);
}
return (NULL);
}
6-abs.c/        0           0     0     644     179       `
#include "main.h"
/**
*_abs - computes the absolute value of an integer
*loop
*@a: var
*Return: n
**/
int _abs(int a)
{
if (a < 0)
{
a = a * (-1);
}
else
{
a = a;
}
return (a);
}

9-strcpy.c/     0           0     0     644     284       `
#include "main.h"
#include <string.h>
/**
**_strcpy - copies the string
*pointerrrrs
*@dest: pointers
*@src: pointers
*Return: dest
**/
char *_strcpy(char *dest, char *src)
{
int x, y, z;
y = strlen(src);
z = 0;
for (x = 0; x <= y; x++)
{
dest[z] = src[x];
z++;
}



return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
